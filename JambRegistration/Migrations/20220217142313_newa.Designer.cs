// <auto-generated />
using System;
using JambRegistration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JambRegistration.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220217142313_newa")]
    partial class newa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("JambRegistration.Entities.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AdminId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PassWord")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("JambRegistration.Entities.Center", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Centers");
                });

            modelBuilder.Entity("JambRegistration.Entities.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("JambRegistration.Entities.SchoolCourse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseId");

                    b.HasIndex("SchoolsID");

                    b.ToTable("SchoolCourses");
                });

            modelBuilder.Entity("JambRegistration.Entities.Schools", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("JambRegistration.Entities.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("CenterID")
                        .HasColumnType("int");

                    b.Property<string>("CourseFirstChoice")
                        .HasColumnType("text");

                    b.Property<string>("CourseSecondChoice")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExaminationDate")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PassWord")
                        .HasColumnType("text");

                    b.Property<string>("SchoolFirstChoice")
                        .HasColumnType("text");

                    b.Property<string>("SchoolSecondChoice")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CenterID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("JambRegistration.Entities.StudentSubject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("SubjectID");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("JambRegistration.Entities.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("JambRegistration.Entities.SchoolCourse", b =>
                {
                    b.HasOne("JambRegistration.Entities.Course", "Course")
                        .WithMany("SchoolCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JambRegistration.Entities.Schools", "Schools")
                        .WithMany("SchoolCourses")
                        .HasForeignKey("SchoolsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("JambRegistration.Entities.Student", b =>
                {
                    b.HasOne("JambRegistration.Entities.Center", "center")
                        .WithMany()
                        .HasForeignKey("CenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("center");
                });

            modelBuilder.Entity("JambRegistration.Entities.StudentSubject", b =>
                {
                    b.HasOne("JambRegistration.Entities.Student", "Student")
                        .WithMany("studentsubject")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JambRegistration.Entities.Subject", "Subject")
                        .WithMany("studentsubject")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("JambRegistration.Entities.Course", b =>
                {
                    b.Navigation("SchoolCourses");
                });

            modelBuilder.Entity("JambRegistration.Entities.Schools", b =>
                {
                    b.Navigation("SchoolCourses");
                });

            modelBuilder.Entity("JambRegistration.Entities.Student", b =>
                {
                    b.Navigation("studentsubject");
                });

            modelBuilder.Entity("JambRegistration.Entities.Subject", b =>
                {
                    b.Navigation("studentsubject");
                });
#pragma warning restore 612, 618
        }
    }
}
